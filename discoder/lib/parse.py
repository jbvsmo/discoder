__author__ = 'jb'

from discoder.lib import Obj
import re

class ParseError(Exception):
    pass

tag = Obj(
    # Regex for parsing the markup language generated by ffprobe or avprobe
    open = re.compile(r'^\[(\w+)\]$'),
    close = re.compile(r'^\[/(\w+)\]$'),
    value = re.compile(r'^(\w+)(?::(\w+))?=(.*)$')
)

def probe(text):
    """
        Parse multiline text generated by `ffprobe` or `avprobe`
        Command line:
            ffprobe -v quiet [-show_format] [-show_streams] filename

        :type text: str
        
        Input:
        ------
        [TAG]
        data_x=1
        data_y=2
        INFO:data_z=3
        [/TAG]

        Output:
        -------
        {'tag': [{'data_x': 1, 'data_y': 2, 'info': {'data_z': 3}}]}
    """
    blocks = Obj()
    this = None
    for i, line in enumerate(text.splitlines()):
        if not line.strip():
            continue
        open_block = tag.open.match(line)
        if open_block:
            if this is not None:
                raise ParseError('Opened block without closing last one: {0}: {1}'.format(i, line))
            this = Obj()
            blocks.setdefault(open_block.group(1).lower(), []).append(this)
        else:
            if this is None:
                raise ParseError("There's no block to insert data or close: {0}: {1}".format(i, line))
            if tag.close.match(line):
                this = None
            else:
                name, sub, val = tag.value.match(line).groups()
                if not sub:
                    this[name] = val
                else:
                    attr = this.setdefault(name.lower(), Obj())
                    attr[sub] = val
    return blocks
